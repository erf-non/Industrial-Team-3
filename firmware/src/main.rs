mod display;
mod mqtt;
mod network;
mod piezo;

use anyhow::{bail, Result};
use esp_idf_svc::eventloop::EspSystemEventLoop;
use esp_idf_svc::hal::prelude::Peripherals;
use esp_idf_svc::sys::nvs_flash_init;
use log::info;
use rgb_led::{RGB8, WS2812RMT};
use wifi::wifi;

use embassy_time::{Duration, Timer};
use esp_idf_hal::gpio::{Input, Level, Output, Pin, Pull};
use esp_idf_hal::i2c::{I2cConfig, I2cDriver};
use esp_idf_hal::prelude::*;
use sh1106::{prelude::*, Builder};

use embedded_hal::delay::DelayNs;
use embedded_hal::pwm::SetDutyCycle;
use esp_idf_hal::ledc::{LedcDriver, LedcTimerDriver, config::TimerConfig};
use crate::display::Display;
use crate::piezo::{Piezo, Tone};

/// This configuration is picked up at compile time by `build.rs` from the
/// file `cfg.toml`. The constant `CONFIG` is auto-generated by `toml_config`.
#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
    #[default("")]
    aws_endpoint: &'static str,
    #[default("")]
    aws_privkey: &'static str,
    #[default("")]
    aws_cert: &'static str,
}

/// Entry point to our application.
///
/// It sets up a Wi-Fi connection to the Access Point given in the
/// configuration, then blinks the RGB LED green/blue.
///
/// If the LED goes solid red, then it was unable to connect to your Wi-Fi
/// network.
fn main() -> Result<()> {
    esp_idf_svc::sys::link_patches();   
    esp_idf_svc::log::EspLogger::initialize_default();
    unsafe { esp_idf_svc::sys::nvs_flash_init() };

    let mut peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // hardware i2c bus 0, sda pin 19, scl pin 18
    let mut display =
        Display::init(peripherals.i2c0, peripherals.pins.gpio19, peripherals.pins.gpio18);
    
    let mut piezo = 
        Piezo::init(peripherals.pins.gpio21, peripherals.ledc.timer0, peripherals.ledc.channel0);

    info!("Hello, world!");

    piezo.sound(Tone::E5, 220, 20);
    piezo.sound(Tone::B5, 220, 20);
    piezo.sound(Tone::E5, 220, 20);
    
    display.text_demo("connecting...");

    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        CONFIG.wifi_ssid,
        CONFIG.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => inner,
        Err(err) => {
            bail!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };

    display.text_demo("hiiiii :3");
    std::thread::sleep(std::time::Duration::from_secs(3));

    loop {
        display.veryhappy_anim();
    }

    loop {
        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(1));
        info!("Hello, world!");
    }
}
